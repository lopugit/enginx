let path = require('path')
let fs = require('fs')
let rimraf = require('rimraf')
let shell = require('shelljs')

function generateConfigs(args){
	let out = './output'
	let tmp = out+'/tmp'
	let perm = out+'/perm'
	let dirs = {
		sites: tmp+'/sites/',
		certs: perm+'/certs/',
		scripts: tmp+'/scripts/',
		confs: tmp+'/confs/',
		certbotcerts: perm+'/letsencrypt/live/',
		localcertsosx: '/usr/local/etc/openresty/certs/',
	}
	let paths = {
		script: dirs.scripts+'script.tmp.sh',
		ssl: dirs.confs+'ssl.tmp.conf',
	}
	shell.cd(path.dirname(require.main.filename)+'/../')
	let sites = require('sites')(args)
	for(var dir of Object.keys(dirs)){
		if(dir.indexOf(tmp)) rimraf.sync(dir)
		fs.mkdirSync(dirs[dir], { recursive: true })
	}
	
	let d = `
		map $http_upgrade $connection_upgrade {
			default upgrade;
			''      close;
		}
	\n\n`
	
	for(var site of sites){
		console.log(site.server_name)
		let file = d
		file += `
		server {
			listen  80;
			listen [::]:80;
		`
		if(site.certbot){
			file += `
				location ~^/.well-known/acme-challenge/.*$ {
					root /things/perm/certbotwww;
				}
			`
		}
		file += `
			location / {
				return 301          https://$host$request_uri;
			}
		`
		file += `	server_name ${site.server_name};`
		file += `\n`
		file += `	}\n`
		let cert
		if(site.self_signed){
			// generate cert
			try {
				cert = fs.readFileSync(`${dirs.certs}${site.server_name}/crt.priv.pem`)
			} catch(err){
				let script = `
					openssl req -x509 -nodes -days 1000 -newkey rsa:2048 -keyout ${dirs.certs}${site.server_name}/crt.priv.pem -out ${dirs.certs}${site.server_name}/crt.pub.pem -config ${paths.ssl} -sha256
				`
				let conf = `
					[req]
					distinguished_name = req_distinguished_name
					x509_extensions = v3_req
					prompt = no
					[req_distinguished_name]
					C = GE
					ST = Gen
					L = Gen
					O = Gen
					OU = Dev
					CN = ${site.server_name}
					[v3_req]
					keyUsage = critical, keyAgreement, digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
					extendedKeyUsage = serverAuth
					subjectAltName = @alt_names
					[alt_names]
					DNS.1 = ${site.server_name}
				`
				fs.mkdirSync(`${dirs.certs}${site.server_name}`, { recursive: true })
				fs.writeFileSync(paths.script, script)
				// write ssl conf file
				fs.writeFileSync(paths.ssl, conf)
				fs.chmodSync(paths.script, '777')
				try {
					shell.exec(paths.script)
					cert = fs.readFileSync(`${dirs.certs}${site.server_name}/crt.priv.pem`)
				} catch(err){	
				}
			}
			if(cert){
				console.log('cert found')
				file += `
				server {
					listen 443 ssl ;
					listen [::]:443 ssl ;				
					server_name ${site.server_name} ;
					keepalive_timeout   70;
					ssl_certificate         ${args.dev ? dirs.localcertsosx : dirs.certs}${site.server_name}/crt.pub.pem ;
					ssl_certificate_key     ${args.dev ? dirs.localcertsosx : dirs.certs}${site.server_name}/crt.priv.pem ;
				`
				if(site.ip){
					file += `
						location / {
							proxy_set_header  x-real-IP             $remote_addr;
							proxy_set_header  x-forwarded-for       $proxy_add_x_forwarded_for;
							proxy_http_version  1.1;
							proxy_set_header    Upgrade                 $http_upgrade;
							proxy_set_header    Connection              $connection_upgrade;
							proxy_set_header    host                    $host;
							proxy_pass ${site.ip};
					`
					if(site.changeHost){
						// RequestHeader set Host "${site.changeHost}" ;
						file += `
							proxy_set_header HOST "${site.changeHost}" ;
						`
					}
					file += `}\n`
					// file += `
					// 	ProxyPreserveHost On ;
					// `
				} else if(site.dir){
					file += `
						location / {
							root ${site.dir} ;
							index index.html index.htm ;
						}
					`
				}
				// close ssl server block
				file += `
				}\n`
			}
		} else if (site.certbot){
			// console.log('checking cert for '+site.server_name)
			let certpath = `${dirs.certbotcerts}${site.server_name}/privkey.pem`
			// console.log('certpath', certpath)
			cert = shell.test('-e', certpath)
			if(cert){
				console.log('cert found')
				// open ssl server block
				file += `
				server {
					listen 443 ssl ;
					listen [::]:443 ssl ;				
					server_name ${site.server_name} ;
					keepalive_timeout   70;
					ssl_certificate         /things/perm/letsencrypt/live/${site.server_name}/fullchain.pem ;
					ssl_certificate_key     /things/perm/letsencrypt/live/${site.server_name}/privkey.pem ;
					include 								/things/perm/letsencrypt/options-ssl-nginx.conf ;
					ssl_dhparam 						/things/perm/letsencrypt/ssl-dhparams.pem ;
				`
				if(site.ip){
					file += `
						location / {
							proxy_set_header  x-real-IP             $remote_addr;
							proxy_set_header  x-forwarded-for       $proxy_add_x_forwarded_for;
							proxy_http_version  1.1;
							proxy_set_header    Upgrade                 $http_upgrade;
							proxy_set_header    Connection              $connection_upgrade;
							proxy_set_header    host                    $host;
							proxy_pass ${site.ip};
					`
					if(site.changeHost){
						// RequestHeader set Host "${site.changeHost}" ;
						file += `
							proxy_set_header HOST "${site.changeHost}" ;
						`
					}
					file += `}\n`
					// file += `
					// 	ProxyPreserveHost On ;
					// `
				} else if(site.dir){
					file += `
						location / {
							root ${site.dir} ;
						}
					`
				}
				// close ssl server block
				file += `
				}\n`
			} else {
				console.log('no cert found for '+site.server_name)
			}
		}
		fs.writeFileSync(dirs.sites+site.server_name+'.conf', file)
	}
}

module.exports = generateConfigs