// const
let args = require('minimist')(process.argv.slice(2))
let generateConfigs = require('generateConfigs')
let generateCertbotCerts = require('generateCertbotCerts')
let generateDomains = require('generateDomains')
let shell = require('shelljs')
let path = require('path')

if(Object.keys(args).length == 1) args.all = true

if((args.host || args.prod || args.nobuild || args.nocertbot || args.noenginx) && !args.notall) args.all = true ;
if(args.prod) args.host = 'enginx' ; 
if(args.dev) {
	args.nocertbot = args.certbot ? false : true ; args.noenginx = true
}
if(args.dev && !args.host) args.host = '127.0.0.1'
if(args.dev) args.debug = true ;

shell.cd(path.dirname(require.main.filename)+'/../')

args.scripts = {
	volumes: `
		docker rm --force enginxvolumes ;
		docker run \
		-v things:/things \
		-v letsencrypt:/things/perm/letsencrypt \
		--name enginxvolumes alpine:3.9 true ;
		docker cp -L /things/statics syncVolumes:/things/ ;
		docker cp assets/options-ssl-nginx.conf enginxvolumes:/things/perm/letsencrypt/options-ssl-nginx.conf ;
		docker cp assets/ssl-dhparams.pem enginxvolumes:/things/perm/letsencrypt/ssl-dhparams.pem ;
	`,
	syncVolumes: `
		docker rm --force syncVolumes ;
		docker run \
		-v things:/things \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v letsencrypt:/things/perm/letsencrypt \
		-v certs:/things/perm/certs \
		--name syncVolumes alpine:3.9 true ;
		sudo rm -r ./output/* ;
		sudo docker cp -L syncVolumes:/things/ ./output ;
		sudo cp -a ./output/things/* ./output/ ;
		sudo rm -r ./output/things ;
		sudo chown -R lopu:${args.group || 'admin'} output/*
	`,
	enginxjs: `
		${args.nobuild ? '' : 'docker build ./ -f enginxjs.Dockerfile -t enginxjs ; '}
		docker rm --force enginxjs ; 
		docker run -i \
		-v things:/things \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v letsencrypt:/things/perm/letsencrypt \
		-v certs:/things/perm/certs \
		--name enginxjs enginxjs \
		node node/index.js --generateConfigs --nosync ${args.host ? '--host '+args.host : ''} --notall --things ;
		docker rm --force enginxjs ;
	`,
	enginx: `
		${args.nobuild ? '' : 'docker build ./ -t enginx -f enginx.Dockerfile  ; '}
		docker rm --force enginx ; 
		docker run ${args.i ? '-i' : '-d'} --name enginx \
		--restart=always \
		-v things:/things \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v letsencrypt:/things/perm/letsencrypt \
		-v certs:/things/perm/certs \
		-p 80:80 \
		-p 8080:8080 \
		-p 443:443 \
		enginx ;
	`,
	renginx: `
		docker exec ${args.i ? '-i' : '-d'} enginx openresty -s reload
	`,
	certbotcertgenerator: function(args){
		return `
			${args.nobuild ? '' : 'docker build ./ -f certbot.Dockerfile -t certbot ; '}
			docker rm --force certbotcertgenerator ; 
			docker run \
			-v things:/things \
			-v certbotwww:/things/perm/certbotwww \
			-v letsencrypt:/etc/letsencrypt \
			--name certbotcertgenerator \
			--entrypoint "certbot" \
			certbot \
			certonly --webroot -w /things/perm/certbotwww ${args.staging || ''} ${args.prod ? '' : '--dry-run'} --email ${args.email} ${args.domains} --rsa-key-size ${args.rsa_key_size || '4096'} --agree-tos --force-renewal  ;
		`
	},
	certbotautorenew: `
		docker rm --force certbotautorenew ;
		docker run ${args.i ? '-i' : '-d'} \
		--name certbotautorenew \
		--restart=always \
		-v things:/things \
		-v certbotwww:/things/perm/certbotwww \
		-v letsencrypt:/etc/letsencrypt \
		--entrypoint "/autorenew.sh" \
		certbot 
	`,
	debug: `
		${args.nobuild ? '' : 'docker build ./ -f debug.Dockerfile -t enginxdebug ; '}
		docker rm --force enginxdebug ; 
		docker run ${args.i ? '-i' : '-d'} \
		-v things:/things \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v letsencrypt:/things/perm/letsencrypt \
		-v certs:/things/perm/certs \
		--name enginxdebug enginxdebug ;
	`,
	cpdev: `

	`
}

if(args.volumes || args.all){
	console.log('running volumes')
	shell.exec(`
		${args.scripts.volumes}
	`)
}

if((args.syncVolumes || args.all || !args.nosync) && !args.nodocker){
	console.log('running syncVolumes')
	shell.exec(`
		${args.scripts.syncVolumes}
	`)
}

if(args.generateConfigs || args.all || args.dev){
	console.log('running generateConfigs')
	generateConfigs(args)
}

if((args.enginxjs || args.all) && !args.noenginxjs && !args.nodocker){
	console.log('running enginxjs')
	shell.exec(`
		${args.scripts.enginxjs}
	`)
}

if((args.enginx || args.all) && !args.noenginx && !args.nodocker){
	console.log('running enginx')
	shell.exec(`
		${args.scripts.enginx}
	`)
}


if(args.dev){
	console.log('running cpdev')
	shell.exec(`
		sudo mkdir -p /usr/local/etc/openresty/certs/ /usr/local/etc/openresty/conf.d/ ;
		sudo rm -r /usr/local/etc/openresty/certs/* ;
		sudo rm -r /usr/local/etc/openresty/sites-enabled/* ;
		sudo cp -a ./output/perm/certs/* /usr/local/etc/openresty/certs/ ;
		sudo cp -a ./output/tmp/sites/* /usr/local/etc/openresty/sites-enabled/ ;
		sudo cp ./assets/nginx.conf /usr/local/etc/openresty/nginx.conf ;
		renginx
	`)
}

if((args.certbot || args.all) && !args.nocertbot){
	console.log('running generateCertbotCerts')
	generateCertbotCerts(args)
	console.log('running certbotautorenew')
	shell.exec(`
		${args.scripts.certbotautorenew}
	`)
	if(args.enginxjs || args.all){
		console.log('running enginxjs')
		shell.exec(`
			${args.scripts.enginxjs}
		`)
	}
}

if((args.enginx || args.all) && !args.noenginx && !args.nodocker){
	console.log('running renginx')
	shell.exec(`
	${args.scripts.renginx}
	`)
}
// end
if((args.debug || args.all) && !(args.nocertbot || args.noenginx || args.nodocker)){
	console.log('running debug')
	shell.exec(`
		${args.scripts.debug}
	`)
}

if((args.syncVolumes || args.all || !args.nosync) && !args.nodocker){
	console.log('running syncVolumes')
	shell.exec(`
		${args.scripts.syncVolumes}
	`)
}

module.exports = this