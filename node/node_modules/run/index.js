// const
let args = require('minimist')(process.argv.slice(2))
let generateConfigs = require('generateConfigs')
let generateDomains = require('generateDomains')
let shell = require('shelljs')
let path = require('path')
if(Object.keys(args).length == 1){
	args.all = true
}
shell.cd(path.dirname(require.main.filename)+'/../')

let scripts = {
	volumes: `
		docker rm --force enginxvolumes
		docker run \
		-v certbotconf:/things/perm/certbotconf \
		--name enginxvolumes alpine:3.9 true ;
		docker cp assets/options-ssl-nginx.conf enginxvolumes:/things/perm/certbotconf/options-ssl-nginx.conf ;
		docker cp assets/ssl-dhparams.pem enginxvolumes:/things/perm/certbotconf/ssl-dhparams.pem ;
	`,
	enginxjs: `
		docker build ./ -f enginxjs.Dockerfile -t enginxjs ; 
		docker rm --force enginxjs ; 
		docker run -i \
		-v sites:/enginxjs/output/tmp/sites \
		-v certbotwww:/enginxjs/output/perm/certbotwww \
		-v certbotconf:/enginxjs/output/perm/certbotconf \
		-v certbotCerts:/enginxjs/output/perm/certs/certbot \
		-v certs:/enginxjs/output/perm/certs \
		--name enginxjs enginxjs \
		node node/index.js --generateConfigs;
		docker rm --force enginxjs ;
	`,
	enginx: `
		docker build ./ -t enginx -f enginx.Dockerfile  ; 
		docker rm --force enginx ; 
		docker run --name enginx \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v certbotconf:/things/perm/certbotconf \
		-v certbotCerts:/things/perm/certs/certbot \
		-v certs:/things/perm/certs \
		--network=bridge \
		-p 80:80 \
		-p 8080:8080 \
		-p 443:443 \
		enginx
	`,
	renginx: `
		docker exec -d enginx openresty -s reload
	`,
	certbotcerts: function(args){
		// docker exec -i \
		// certbot \
		return `
			docker build ./ -f certbot.Dockerfile -t certbot ; 
			docker rm --force certbotcerts ; 
			docker run \
			-v certbotwww:/things/perm/certbotwww \
			-v certbotconf:/etc/letsencrypt \
			-v certbotCerts:/etc/letsencrypt/live \
			--name certbotcerts \
			--entrypoint "certbot" \
			certbot \
			certonly --webroot -w /things/perm/certbotwww ${args.staging || ''} --email ${args.email} ${args.domains} --rsa-key-size ${args.rsa_key_size || '4096'} --agree-tos --force-renewal  ;
		`
	},
	certbotautorenew: `
		docker rm --force certbotautorenew ;
		docker run -d --name \
		certbotautorenew \
		-v certbotwww:/things/perm/certbotwww \
		-v certbotconf:/etc/letsencrypt \
		-v certbotCerts:/etc/letsencrypt/live \
	--entrypoint "/autorenew.sh" \
		certbot 
	`,
	debug: `
		docker build ./ -f debug.Dockerfile -t enginxdebug ; 
		docker rm --force enginxdebug ; 
		docker run -d \
		-v sites:/things/tmp/sites \
		-v certbotwww:/things/perm/certbotwww \
		-v certbotconf:/things/perm/certbotconf \
		-v certbotCerts:/things/perm/certs/certbot \
		-v certs:/things/perm/certs \
		--name enginxdebug enginxdebug ;
	`,
}

if(args.volumes || args.all){
	console.log('running volumes')
	shell.exec(`
		${scripts.volumes}
	`)
}

if(args.enginxjs || args.all){
	console.log('running enginxjs')
	shell.exec(`
		${scripts.enginxjs}
	`)
}

if(args.enginx || args.all){
	console.log('running enginx')
	shell.exec(`
		${scripts.enginx}
	`)
}

if(args.generateConfigs || args.all){
	console.log('running generateConfigs')
	generateConfigs()
}

if(args.certbot || args.all){
	// console.log('running certbot')
	// shell.exec(`
	// 	${scripts.certbot}
	// `)
	let args = {
		email: 'lopudesigns@gmail.com',
		domains: generateDomains()
	}
	console.log('running certbotcerts')
	shell.exec(`
		${scripts.certbotcerts(args)}
	`)
	console.log('running enginxjs')
	shell.exec(`
		${scripts.enginxjs}
	`)
	console.log('running renginx')
	shell.exec(`
	${scripts.renginx}
	`)
	console.log('running certbotautorenew')
	shell.exec(`
		${scripts.certbotautorenew}
	`)
}

// end
if(args.debug || args.all){
	console.log('running debug')
	shell.exec(`
		${scripts.debug}
	`)
}

module.exports = this